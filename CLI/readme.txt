    Основное общение с пользователем происходит в бесконечном цикле. Программа ждёт ввода от пользователя. Затем на ввёденую строку натравилвается последовательность Lexxer -> Parser -> Executer. 
    Lexxer делает первичную обработку подставляя значения переменных. Особенность моей реализации - переменные могут стоять почти из каких угодно символо, по этому сепаратором для переменных выступают пробельный символ, одинарная кавычка, знак доллара. Они не могут быть частью имени переменной.  
    Parser превращает строчку в последовательность команд. Считаются что все команды имеют перфиксную запись, кроме присвоение. Присвоение считается имеет инфиксную запись. Если записать exit = 1234, то создастся переменная exit со значением 1234, так как присвоение у меня имеет наивысший приоритет. У всех команд заданное количество параметров, я подумал о возможности добаить командом параметры, но в задание этого нет, так что не реализовал эту возможность.
    Executer запускает команды по очереди. Так как каждая команда поддерживает инвариант взаимодействия через строку, она имеет список входных аргументов, которые являются строкой, и возвращает всегда строчку, то очень просто выходное значение команды перенести в входное для следующий. В конце executer выводит результат последней команды. Результат первой команды кладётся как последний аргумент для второй команды.  
    Так как я пишу на питоне, то я поддерживаю политику кидать exception абсолютно по любому поводу. 
